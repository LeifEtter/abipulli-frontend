/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestingImport } from './routes/testing'
import { Route as LoginImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as AdminRouteImport } from './routes/_admin/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthDesignerImport } from './routes/_auth/designer'
import { Route as AdminOrdersImport } from './routes/_admin/orders'

// Create/Update Routes

const TestingRoute = TestingImport.update({
  id: '/testing',
  path: '/testing',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AdminRouteRoute = AdminRouteImport.update({
  id: '/_admin',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthDesignerRoute = AuthDesignerImport.update({
  id: '/designer',
  path: '/designer',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AdminOrdersRoute = AdminOrdersImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => AdminRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_admin': {
      id: '/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/testing': {
      id: '/testing'
      path: '/testing'
      fullPath: '/testing'
      preLoaderRoute: typeof TestingImport
      parentRoute: typeof rootRoute
    }
    '/_admin/orders': {
      id: '/_admin/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof AdminOrdersImport
      parentRoute: typeof AdminRouteImport
    }
    '/_auth/designer': {
      id: '/_auth/designer'
      path: '/designer'
      fullPath: '/designer'
      preLoaderRoute: typeof AuthDesignerImport
      parentRoute: typeof AuthRouteImport
    }
  }
}

// Create and export the route tree

interface AdminRouteRouteChildren {
  AdminOrdersRoute: typeof AdminOrdersRoute
}

const AdminRouteRouteChildren: AdminRouteRouteChildren = {
  AdminOrdersRoute: AdminOrdersRoute,
}

const AdminRouteRouteWithChildren = AdminRouteRoute._addFileChildren(
  AdminRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthDesignerRoute: typeof AuthDesignerRoute
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthDesignerRoute: AuthDesignerRoute,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/testing': typeof TestingRoute
  '/orders': typeof AdminOrdersRoute
  '/designer': typeof AuthDesignerRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/testing': typeof TestingRoute
  '/orders': typeof AdminOrdersRoute
  '/designer': typeof AuthDesignerRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_admin': typeof AdminRouteRouteWithChildren
  '/_auth': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/testing': typeof TestingRoute
  '/_admin/orders': typeof AdminOrdersRoute
  '/_auth/designer': typeof AuthDesignerRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/testing' | '/orders' | '/designer'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/testing' | '/orders' | '/designer'
  id:
    | '__root__'
    | '/'
    | '/_admin'
    | '/_auth'
    | '/login'
    | '/testing'
    | '/_admin/orders'
    | '/_auth/designer'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRouteRoute: typeof AdminRouteRouteWithChildren
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  TestingRoute: typeof TestingRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRouteRoute: AdminRouteRouteWithChildren,
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  TestingRoute: TestingRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_admin",
        "/_auth",
        "/login",
        "/testing"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_admin": {
      "filePath": "_admin/route.tsx",
      "children": [
        "/_admin/orders"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/designer"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/testing": {
      "filePath": "testing.tsx"
    },
    "/_admin/orders": {
      "filePath": "_admin/orders.tsx",
      "parent": "/_admin"
    },
    "/_auth/designer": {
      "filePath": "_auth/designer.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
