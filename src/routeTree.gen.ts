/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as TestingImport } from "./routes/testing";
import { Route as OrdersImport } from "./routes/orders";
import { Route as HomeImport } from "./routes/home";

// Create/Update Routes

const TestingRoute = TestingImport.update({
  id: "/testing",
  path: "/testing",
  getParentRoute: () => rootRoute,
} as any);

const OrdersRoute = OrdersImport.update({
  id: "/orders",
  path: "/orders",
  getParentRoute: () => rootRoute,
} as any);

const HomeRoute = HomeImport.update({
  id: "/home",
  path: "/home",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/home": {
      id: "/home";
      path: "/home";
      fullPath: "/home";
      preLoaderRoute: typeof HomeImport;
      parentRoute: typeof rootRoute;
    };
    "/orders": {
      id: "/orders";
      path: "/orders";
      fullPath: "/orders";
      preLoaderRoute: typeof OrdersImport;
      parentRoute: typeof rootRoute;
    };
    "/testing": {
      id: "/testing";
      path: "/testing";
      fullPath: "/testing";
      preLoaderRoute: typeof TestingImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/home": typeof HomeRoute;
  "/orders": typeof OrdersRoute;
  "/testing": typeof TestingRoute;
}

export interface FileRoutesByTo {
  "/home": typeof HomeRoute;
  "/orders": typeof OrdersRoute;
  "/testing": typeof TestingRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/home": typeof HomeRoute;
  "/orders": typeof OrdersRoute;
  "/testing": typeof TestingRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/home" | "/orders" | "/testing";
  fileRoutesByTo: FileRoutesByTo;
  to: "/home" | "/orders" | "/testing";
  id: "__root__" | "/home" | "/orders" | "/testing";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  HomeRoute: typeof HomeRoute;
  OrdersRoute: typeof OrdersRoute;
  TestingRoute: typeof TestingRoute;
}

const rootRouteChildren: RootRouteChildren = {
  HomeRoute: HomeRoute,
  OrdersRoute: OrdersRoute,
  TestingRoute: TestingRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/home",
        "/orders",
        "/testing"
      ]
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/orders": {
      "filePath": "orders.tsx"
    },
    "/testing": {
      "filePath": "testing.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
