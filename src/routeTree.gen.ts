/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestingImport } from './routes/testing'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as IndexImport } from './routes/index'
import { Route as AuthOrdersImport } from './routes/_auth.orders'
import { Route as AuthDesignerImport } from './routes/_auth.designer'

// Create/Update Routes

const TestingRoute = TestingImport.update({
  id: '/testing',
  path: '/testing',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthOrdersRoute = AuthOrdersImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => AuthRoute,
} as any)

const AuthDesignerRoute = AuthDesignerImport.update({
  id: '/designer',
  path: '/designer',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/testing': {
      id: '/testing'
      path: '/testing'
      fullPath: '/testing'
      preLoaderRoute: typeof TestingImport
      parentRoute: typeof rootRoute
    }
    '/_auth/designer': {
      id: '/_auth/designer'
      path: '/designer'
      fullPath: '/designer'
      preLoaderRoute: typeof AuthDesignerImport
      parentRoute: typeof AuthImport
    }
    '/_auth/orders': {
      id: '/_auth/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof AuthOrdersImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthDesignerRoute: typeof AuthDesignerRoute
  AuthOrdersRoute: typeof AuthOrdersRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthDesignerRoute: AuthDesignerRoute,
  AuthOrdersRoute: AuthOrdersRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/testing': typeof TestingRoute
  '/designer': typeof AuthDesignerRoute
  '/orders': typeof AuthOrdersRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/testing': typeof TestingRoute
  '/designer': typeof AuthDesignerRoute
  '/orders': typeof AuthOrdersRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/testing': typeof TestingRoute
  '/_auth/designer': typeof AuthDesignerRoute
  '/_auth/orders': typeof AuthOrdersRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/login' | '/testing' | '/designer' | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/login' | '/testing' | '/designer' | '/orders'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/testing'
    | '/_auth/designer'
    | '/_auth/orders'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  TestingRoute: typeof TestingRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  TestingRoute: TestingRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/login",
        "/testing"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/designer",
        "/_auth/orders"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/testing": {
      "filePath": "testing.tsx"
    },
    "/_auth/designer": {
      "filePath": "_auth.designer.tsx",
      "parent": "/_auth"
    },
    "/_auth/orders": {
      "filePath": "_auth.orders.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
